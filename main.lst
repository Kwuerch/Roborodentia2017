
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000060 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/cc2bUc5s.o
f1e0f85f l       *ABS*	00000000 BootRAM
08000eac l       .text	00000000 LoopCopyDataInit
08000ea4 l       .text	00000000 CopyDataInit
08000ec0 l       .text	00000000 LoopFillZerobss
08000eba l       .text	00000000 FillZerobss
08000ed2 l       .text	00000000 LoopForever
08000ee8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f30x_gpio.c
00000000 l    df *ABS*	00000000 stm32f30x_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
20000010 l     O .data	00000020 ADCPrescTable
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f30x_it.c
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
00000000 l    df *ABS*	00000000 system_stm32f30x.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/5.3.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/5.3.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
08000ee8  w    F .text	00000002 RTC_Alarm_IRQHandler
08000ee8  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08000d28 g     F .text	0000004c STM_EVAL_LEDInit
08000490 g     F .text	0000000c RCC_HSICmd
08000ee8  w    F .text	00000002 TIM8_CC_IRQHandler
080004bc g     F .text	00000018 RCC_LSEDriveConfig
080004f8 g     F .text	0000000c RCC_PLLCmd
08000d20 g     F .text	00000002 DebugMon_Handler
08000b24 g     F .text	0000001c RCC_AHBPeriphResetCmd
080003b8 g     F .text	0000002a GPIO_PinAFConfig
08000c00 g     F .text	0000000c RCC_ClearITPendingBit
0800038c g     F .text	0000000c GPIO_ReadOutputDataBit
08000ee8  w    F .text	00000002 TIM1_CC_IRQHandler
08000d16 g     F .text	00000002 HardFault_Handler
08000ee8  w    F .text	00000002 USB_HP_IRQHandler
08000d24 g     F .text	00000004 SysTick_Handler
08000524 g     F .text	00000014 RCC_MCOConfig
08000ee8  w    F .text	00000002 PVD_IRQHandler
08000f84 g       .text	00000000 _sidata
08000d22 g     F .text	00000002 PendSV_Handler
08000d14 g     F .text	00000002 NMI_Handler
200000c4 g       .bss	00000000 __exidx_end
08000ee8  w    F .text	00000002 EXTI3_IRQHandler
08000b78 g     F .text	0000001c RCC_ITConfig
08000f84 g       .text	00000000 _etext
20000060 g       .bss	00000000 _sbss
08000538 g     F .text	00000014 RCC_SYSCLKConfig
08000448 g     F .text	00000034 RCC_WaitForHSEStartUp
08000ac4 g     F .text	0000000c RCC_BackupResetCmd
08000518 g     F .text	0000000c RCC_ClockSecuritySystemCmd
08000ee8  w    F .text	00000002 EXTI0_IRQHandler
08000ee8  w    F .text	00000002 I2C2_EV_IRQHandler
08000bdc g     F .text	00000010 RCC_ClearFlag
08000ee8  w    F .text	00000002 FPU_IRQHandler
08000ee8  w    F .text	00000002 EXTI2_TS_IRQHandler
08000ee8  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08000438 g     F .text	00000010 RCC_HSEConfig
08000d1c g     F .text	00000002 UsageFault_Handler
08000aec g     F .text	0000001c RCC_APB2PeriphClockCmd
08000ee8  w    F .text	00000002 ADC1_2_IRQHandler
08000298 g     F .text	000000ba GPIO_Init
080004e0 g     F .text	00000018 RCC_PLLConfig
08000944 g     F .text	00000020 RCC_ADCCLKConfig
08000f5c g     O .text	00000010 GPIO_PIN
20000000 g       .data	00000000 _sdata
08000ee8  w    F .text	00000002 SPI1_IRQHandler
08000a1c g     F .text	00000018 RCC_HRTIM1CLKConfig
080003b4 g     F .text	00000004 GPIO_Write
08000ee8  w    F .text	00000002 TIM6_DAC_IRQHandler
08000398 g     F .text	00000006 GPIO_ReadOutputData
0800049c g     F .text	00000020 RCC_LSEConfig
08000ab8 g     F .text	0000000c RCC_RTCCLKCmd
08000ee8  w    F .text	00000002 TIM8_UP_IRQHandler
08000b08 g     F .text	0000001c RCC_APB1PeriphClockCmd
08000bec g     F .text	00000014 RCC_GetITStatus
200000c4 g       .bss	00000000 __exidx_start
08000eec g     F .text	00000050 __libc_init_array
08000ee8  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000ad0 g     F .text	0000001c RCC_AHBPeriphClockCmd
08000ee8  w    F .text	00000002 DMA1_Channel4_IRQHandler
08000f6c g     F .text	00000000 _init
08000ee8  w    F .text	00000002 USART3_IRQHandler
20000060 g     O .bss	00000004 TimingDelay
200000c4 g       .bss	00000000 _ebss
08000ee8  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000ea0  w    F .text	00000034 Reset_Handler
08000384 g     F .text	00000006 GPIO_ReadInputData
08000ee8  w    F .text	00000002 CAN1_RX1_IRQHandler
08000ee8  w    F .text	00000002 UART5_IRQHandler
08000b94 g     F .text	00000048 RCC_GetFlagStatus
08000ee8  w    F .text	00000002 ADC3_IRQHandler
080003a0 g     F .text	00000004 GPIO_SetBits
08000ee8  w    F .text	00000002 TIM4_IRQHandler
0800054c g     F .text	00000010 RCC_GetSYSCLKSource
080003a8 g     F .text	0000000a GPIO_WriteBit
08000ee8  w    F .text	00000002 DMA2_Channel1_IRQHandler
08000ee8  w    F .text	00000002 I2C1_EV_IRQHandler
08000598 g     F .text	000003ac RCC_GetClocksFreq
08000ee8  w    F .text	00000002 DMA1_Channel6_IRQHandler
08000ee8  w    F .text	00000002 UART4_IRQHandler
08000ee8  w    F .text	00000002 DMA2_Channel4_IRQHandler
20000040 g     O .data	00000020 GPIO_PORT
08000ee8  w    F .text	00000002 TIM3_IRQHandler
08000ee8  w    F .text	00000002 RCC_IRQHandler
20000060 g       .bss	00000000 _bss
08000ee8  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000ee8 g       .text	00000002 Default_Handler
08000ee8  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08000a9c g     F .text	00000010 RCC_RTCCLKConfig
08000ee8  w    F .text	00000002 EXTI15_10_IRQHandler
08000d8c g     F .text	00000018 STM_EVAL_LEDOff
080003a4 g     F .text	00000004 GPIO_ResetBits
08000ee8  w    F .text	00000002 TIM7_IRQHandler
08000f3c g     O .text	00000020 GPIO_CLK
08000ee8  w    F .text	00000002 EXTI9_5_IRQHandler
08000ee8  w    F .text	00000002 TAMPER_STAMP_IRQHandler
08000ee8  w    F .text	00000002 RTC_WKUP_IRQHandler
20000030 g     O .data	00000010 light_wheel
20000064 g     O .bss	00000004 counter
08000ee8  w    F .text	00000002 SPI2_IRQHandler
08000d18 g     F .text	00000002 MemManage_Handler
0800047c g     F .text	00000014 RCC_AdjustHSICalibrationValue
08000c24 g     F .text	000000dc main
08000d1e g     F .text	00000002 SVC_Handler
08000ee8  w    F .text	00000002 DMA2_Channel5_IRQHandler
00000000  w      *UND*	00000000 __init_array_end
08000570 g     F .text	00000014 RCC_PCLK1Config
08000ee8  w    F .text	00000002 DMA1_Channel5_IRQHandler
08000a90 g     F .text	0000000c RCC_USBCLKConfig
08000ee8  w    F .text	00000002 USB_LP_IRQHandler
08000ee8  w    F .text	00000002 EXTI4_IRQHandler
08000ee8  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
08000584 g     F .text	00000014 RCC_PCLK2Config
08000da4 g     F .text	000000fc SystemInit
08000188 g     F .text	00000110 GPIO_DeInit
08000f78 g     F .text	00000000 _fini
08000ee8  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08000ee8  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
080003e4 g     F .text	00000054 RCC_DeInit
08000ee8  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000ee8  w    F .text	00000002 ADC4_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08000ee8  w    F .text	00000002 WWDG_IRQHandler
08000b5c g     F .text	0000001c RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08000504 g     F .text	00000014 RCC_PREDIV1Config
08000c0c g     F .text	00000018 Delay
08000ee8  w    F .text	00000002 TIM2_IRQHandler
08000354 g     F .text	00000014 GPIO_StructInit
08000ee8  w    F .text	00000002 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
08000ee8  w    F .text	00000002 COMP1_2_3_IRQHandler
08000ee8  w    F .text	00000002 EXTI1_IRQHandler
20000060 g       .data	00000000 _edata
08000ee8  w    F .text	00000002 USART2_IRQHandler
08000ee8  w    F .text	00000002 COMP4_5_6_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
20000068 g     O .bss	0000005c RCC_Clocks
08000a34 g     F .text	0000005c RCC_USARTCLKConfig
08000ee8  w    F .text	00000002 I2C2_ER_IRQHandler
08000ee8  w    F .text	00000002 DMA1_Channel2_IRQHandler
080009a0 g     F .text	0000007c RCC_TIMCLKConfig
08000d00 g     F .text	00000014 TimingDelay_Decrement
08000ee8  w    F .text	00000002 TIM8_BRK_IRQHandler
00000000  w      *UND*	00000000 __init_array_start
08000964 g     F .text	0000003c RCC_I2CCLKConfig
08000ee8  w    F .text	00000002 CAN1_SCE_IRQHandler
08000aac g     F .text	0000000c RCC_I2SCLKConfig
08000ee8  w    F .text	00000002 FLASH_IRQHandler
08000368 g     F .text	00000010 GPIO_PinLockConfig
08000d1a g     F .text	00000002 BusFault_Handler
08000ee8  w    F .text	00000002 USART1_IRQHandler
080004d4 g     F .text	0000000c RCC_LSICmd
08000ee8  w    F .text	00000002 SPI3_IRQHandler
08000b40 g     F .text	0000001c RCC_APB2PeriphResetCmd
08000ee8  w    F .text	00000002 I2C1_ER_IRQHandler
08000d74 g     F .text	00000018 STM_EVAL_LEDOn
00000000  w      *UND*	00000000 __preinit_array_start
08000378 g     F .text	0000000c GPIO_ReadInputDataBit
08000ee8  w    F .text	00000002 USBWakeUp_IRQHandler
0800055c g     F .text	00000014 RCC_HCLKConfig
08000ee8  w    F .text	00000002 DMA2_Channel3_IRQHandler
08000ee8  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8000188:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800018c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 800018e:	d021      	beq.n	80001d4 <GPIO_DeInit+0x4c>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 8000190:	4b3a      	ldr	r3, [pc, #232]	; (800027c <GPIO_DeInit+0xf4>)
 8000192:	4298      	cmp	r0, r3
 8000194:	d02a      	beq.n	80001ec <GPIO_DeInit+0x64>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 8000196:	4b3a      	ldr	r3, [pc, #232]	; (8000280 <GPIO_DeInit+0xf8>)
 8000198:	4298      	cmp	r0, r3
 800019a:	d033      	beq.n	8000204 <GPIO_DeInit+0x7c>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 800019c:	4b39      	ldr	r3, [pc, #228]	; (8000284 <GPIO_DeInit+0xfc>)
 800019e:	4298      	cmp	r0, r3
 80001a0:	d03c      	beq.n	800021c <GPIO_DeInit+0x94>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
 80001a2:	4b39      	ldr	r3, [pc, #228]	; (8000288 <GPIO_DeInit+0x100>)
 80001a4:	4298      	cmp	r0, r3
 80001a6:	d045      	beq.n	8000234 <GPIO_DeInit+0xac>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else if(GPIOx == GPIOF)
 80001a8:	4b38      	ldr	r3, [pc, #224]	; (800028c <GPIO_DeInit+0x104>)
 80001aa:	4298      	cmp	r0, r3
 80001ac:	d04e      	beq.n	800024c <GPIO_DeInit+0xc4>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
  }
  else if(GPIOx == GPIOG)
 80001ae:	4b38      	ldr	r3, [pc, #224]	; (8000290 <GPIO_DeInit+0x108>)
 80001b0:	4298      	cmp	r0, r3
 80001b2:	d057      	beq.n	8000264 <GPIO_DeInit+0xdc>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOH)
 80001b4:	4b37      	ldr	r3, [pc, #220]	; (8000294 <GPIO_DeInit+0x10c>)
 80001b6:	4298      	cmp	r0, r3
 80001b8:	d000      	beq.n	80001bc <GPIO_DeInit+0x34>
 80001ba:	bd08      	pop	{r3, pc}
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
 80001bc:	2101      	movs	r1, #1
 80001be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80001c2:	f000 fcaf 	bl	8000b24 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
 80001c6:	2100      	movs	r1, #0
 80001c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }
  }
}
 80001cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if(GPIOx == GPIOH)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
 80001d0:	f000 bca8 	b.w	8000b24 <RCC_AHBPeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80001d4:	2101      	movs	r1, #1
 80001d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001da:	f000 fca3 	bl	8000b24 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80001de:	2100      	movs	r1, #0
 80001e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 80001e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80001e8:	f000 bc9c 	b.w	8000b24 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80001ec:	2101      	movs	r1, #1
 80001ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80001f2:	f000 fc97 	bl	8000b24 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80001f6:	2100      	movs	r1, #0
 80001f8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 80001fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8000200:	f000 bc90 	b.w	8000b24 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000204:	2101      	movs	r1, #1
 8000206:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800020a:	f000 fc8b 	bl	8000b24 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 800020e:	2100      	movs	r1, #0
 8000210:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 8000214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000218:	f000 bc84 	b.w	8000b24 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800021c:	2101      	movs	r1, #1
 800021e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000222:	f000 fc7f 	bl	8000b24 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8000226:	2100      	movs	r1, #0
 8000228:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 800022c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8000230:	f000 bc78 	b.w	8000b24 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8000234:	2101      	movs	r1, #1
 8000236:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800023a:	f000 fc73 	bl	8000b24 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 800023e:	2100      	movs	r1, #0
 8000240:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 8000244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8000248:	f000 bc6c 	b.w	8000b24 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOF)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 800024c:	2101      	movs	r1, #1
 800024e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000252:	f000 fc67 	bl	8000b24 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000256:	2100      	movs	r1, #0
 8000258:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 800025c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else if(GPIOx == GPIOF)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000260:	f000 bc60 	b.w	8000b24 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOG)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
 8000264:	2101      	movs	r1, #1
 8000266:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800026a:	f000 fc5b 	bl	8000b24 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
 800026e:	2100      	movs	r1, #0
 8000270:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 8000274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
  }
  else if(GPIOx == GPIOG)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
 8000278:	f000 bc54 	b.w	8000b24 <RCC_AHBPeriphResetCmd>
 800027c:	48000400 	.word	0x48000400
 8000280:	48000800 	.word	0x48000800
 8000284:	48000c00 	.word	0x48000c00
 8000288:	48001000 	.word	0x48001000
 800028c:	48001400 	.word	0x48001400
 8000290:	48001800 	.word	0x48001800
 8000294:	48001c00 	.word	0x48001c00

08000298 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000298:	2200      	movs	r2, #0
 800029a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800029e:	4613      	mov	r3, r2
 80002a0:	680f      	ldr	r7, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002a2:	2601      	movs	r6, #1
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002a4:	f04f 0e03 	mov.w	lr, #3
 80002a8:	e004      	b.n	80002b4 <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002aa:	3301      	adds	r3, #1
 80002ac:	2b10      	cmp	r3, #16
 80002ae:	f102 0202 	add.w	r2, r2, #2
 80002b2:	d027      	beq.n	8000304 <GPIO_Init+0x6c>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002b4:	fa06 f403 	lsl.w	r4, r6, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 80002b8:	ea34 0507 	bics.w	r5, r4, r7
 80002bc:	d1f5      	bne.n	80002aa <GPIO_Init+0x12>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002be:	f891 c004 	ldrb.w	ip, [r1, #4]
 80002c2:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80002c6:	2d01      	cmp	r5, #1
 80002c8:	fa0e f502 	lsl.w	r5, lr, r2
 80002cc:	d91c      	bls.n	8000308 <GPIO_Init+0x70>
 80002ce:	43ed      	mvns	r5, r5
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002d0:	f8d0 8000 	ldr.w	r8, [r0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002d4:	79cc      	ldrb	r4, [r1, #7]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002d6:	ea08 0505 	and.w	r5, r8, r5
 80002da:	6005      	str	r5, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002dc:	f8d0 8000 	ldr.w	r8, [r0]
 80002e0:	fa0c f502 	lsl.w	r5, ip, r2
 80002e4:	ea45 0508 	orr.w	r5, r5, r8
 80002e8:	6005      	str	r5, [r0, #0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
 80002ea:	68c5      	ldr	r5, [r0, #12]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002ec:	fa0e fc02 	lsl.w	ip, lr, r2
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002f0:	4094      	lsls	r4, r2
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002f2:	ea25 050c 	bic.w	r5, r5, ip
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002f6:	3301      	adds	r3, #1

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002f8:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002fa:	2b10      	cmp	r3, #16
      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
      GPIOx->PUPDR = tmpreg;
 80002fc:	60c4      	str	r4, [r0, #12]
 80002fe:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000302:	d1d7      	bne.n	80002b4 <GPIO_Init+0x1c>
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
      GPIOx->PUPDR = tmpreg;
    }
  }
}
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000308:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800030c:	f891 8005 	ldrb.w	r8, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000310:	f891 9006 	ldrb.w	r9, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000314:	fa0e f502 	lsl.w	r5, lr, r2
 8000318:	43ed      	mvns	r5, r5
 800031a:	ea0a 0a05 	and.w	sl, sl, r5
 800031e:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000322:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000326:	fa08 f802 	lsl.w	r8, r8, r2
 800032a:	ea48 080a 	orr.w	r8, r8, sl
 800032e:	f8c0 8008 	str.w	r8, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000332:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8000336:	fa1f f888 	uxth.w	r8, r8
 800033a:	ea28 0404 	bic.w	r4, r8, r4
 800033e:	8084      	strh	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000340:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8000344:	fa09 f403 	lsl.w	r4, r9, r3
 8000348:	ea44 0408 	orr.w	r4, r4, r8
 800034c:	b2a4      	uxth	r4, r4
 800034e:	8084      	strh	r4, [r0, #4]
 8000350:	e7be      	b.n	80002d0 <GPIO_Init+0x38>
 8000352:	bf00      	nop

08000354 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000354:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000356:	f64f 71ff 	movw	r1, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800035a:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800035c:	6001      	str	r1, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800035e:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000360:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000362:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000364:	71c3      	strb	r3, [r0, #7]
 8000366:	4770      	bx	lr

08000368 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000368:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800036c:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800036e:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000370:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000372:	69c3      	ldr	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000374:	69c3      	ldr	r3, [r0, #28]
 8000376:	4770      	bx	lr

08000378 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000378:	8a03      	ldrh	r3, [r0, #16]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 800037a:	4219      	tst	r1, r3
}
 800037c:	bf14      	ite	ne
 800037e:	2001      	movne	r0, #1
 8000380:	2000      	moveq	r0, #0
 8000382:	4770      	bx	lr

08000384 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000384:	8a00      	ldrh	r0, [r0, #16]
}
 8000386:	b280      	uxth	r0, r0
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800038c:	8a83      	ldrh	r3, [r0, #20]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 800038e:	4219      	tst	r1, r3
}
 8000390:	bf14      	ite	ne
 8000392:	2001      	movne	r0, #1
 8000394:	2000      	moveq	r0, #0
 8000396:	4770      	bx	lr

08000398 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8000398:	8a80      	ldrh	r0, [r0, #20]
}
 800039a:	b280      	uxth	r0, r0
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80003a0:	6181      	str	r1, [r0, #24]
 80003a2:	4770      	bx	lr

080003a4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80003a4:	8501      	strh	r1, [r0, #40]	; 0x28
 80003a6:	4770      	bx	lr

080003a8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80003a8:	b90a      	cbnz	r2, 80003ae <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80003aa:	8501      	strh	r1, [r0, #40]	; 0x28
 80003ac:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80003ae:	6181      	str	r1, [r0, #24]
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop

080003b4 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80003b4:	8281      	strh	r1, [r0, #20]
 80003b6:	4770      	bx	lr

080003b8 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003b8:	08cb      	lsrs	r3, r1, #3
 80003ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80003be:	f001 0107 	and.w	r1, r1, #7
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003c2:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80003c4:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80003c6:	6a04      	ldr	r4, [r0, #32]
 80003c8:	230f      	movs	r3, #15
 80003ca:	408b      	lsls	r3, r1
 80003cc:	ea24 0303 	bic.w	r3, r4, r3
 80003d0:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003d2:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80003d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003d8:	408a      	lsls	r2, r1
 80003da:	ea42 0103 	orr.w	r1, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003de:	6201      	str	r1, [r0, #32]
}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <RCC_DeInit+0x48>)

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <RCC_DeInit+0x4c>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003e8:	6818      	ldr	r0, [r3, #0]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00ECCC;
 80003ea:	4912      	ldr	r1, [pc, #72]	; (8000434 <RCC_DeInit+0x50>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003ec:	f040 0001 	orr.w	r0, r0, #1
 80003f0:	6018      	str	r0, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 80003f2:	6858      	ldr	r0, [r3, #4]
 80003f4:	4002      	ands	r2, r0
 80003f6:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80003fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000402:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800040a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800040c:	685a      	ldr	r2, [r3, #4]
 800040e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000412:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 8000414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000416:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800041a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800041e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00ECCC;
 8000420:	6b18      	ldr	r0, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000422:	2200      	movs	r2, #0

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00ECCC;
 8000424:	4001      	ands	r1, r0
 8000426:	6319      	str	r1, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	f8ffc000 	.word	0xf8ffc000
 8000434:	0f00eccc 	.word	0x0f00eccc

08000438 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8000438:	4b02      	ldr	r3, [pc, #8]	; (8000444 <RCC_HSEConfig+0xc>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 800043e:	7018      	strb	r0, [r3, #0]
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021002 	.word	0x40021002

08000448 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000448:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 800044a:	2300      	movs	r3, #0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800044c:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <RCC_WaitForHSEStartUp+0x30>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 800044e:	9301      	str	r3, [sp, #4]
 8000450:	e002      	b.n	8000458 <RCC_WaitForHSEStartUp+0x10>
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000452:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000456:	d008      	beq.n	800046a <RCC_WaitForHSEStartUp+0x22>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000458:	6813      	ldr	r3, [r2, #0]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800045a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 800045e:	9b01      	ldr	r3, [sp, #4]
 8000460:	f103 0301 	add.w	r3, r3, #1
 8000464:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000466:	9b01      	ldr	r3, [sp, #4]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000468:	d0f3      	beq.n	8000452 <RCC_WaitForHSEStartUp+0xa>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800046a:	4b03      	ldr	r3, [pc, #12]	; (8000478 <RCC_WaitForHSEStartUp+0x30>)
 800046c:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 800046e:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000472:	b002      	add	sp, #8
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <RCC_AdjustHSICalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 800047c:	4a03      	ldr	r2, [pc, #12]	; (800048c <RCC_AdjustHSICalibrationValue+0x10>)
 800047e:	6813      	ldr	r3, [r2, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000480:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000484:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8000488:	6010      	str	r0, [r2, #0]
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000490:	4b01      	ldr	r3, [pc, #4]	; (8000498 <RCC_HSICmd+0x8>)
 8000492:	6018      	str	r0, [r3, #0]
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	42420000 	.word	0x42420000

0800049c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <RCC_LSEConfig+0x1c>)
 800049e:	6a1a      	ldr	r2, [r3, #32]
 80004a0:	f022 0201 	bic.w	r2, r2, #1
 80004a4:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80004a6:	6a1a      	ldr	r2, [r3, #32]
 80004a8:	f022 0204 	bic.w	r2, r2, #4
 80004ac:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 80004ae:	6a1a      	ldr	r2, [r3, #32]
 80004b0:	4310      	orrs	r0, r2
 80004b2:	6218      	str	r0, [r3, #32]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <RCC_LSEDriveConfig+0x14>)
 80004be:	6a1a      	ldr	r2, [r3, #32]
 80004c0:	f022 0218 	bic.w	r2, r2, #24
 80004c4:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 80004c6:	6a1a      	ldr	r2, [r3, #32]
 80004c8:	4310      	orrs	r0, r2
 80004ca:	6218      	str	r0, [r3, #32]
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <RCC_LSICmd+0x8>)
 80004d6:	6018      	str	r0, [r3, #0]
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	42420480 	.word	0x42420480

080004e0 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <RCC_PLLConfig+0x14>)
 80004e2:	6853      	ldr	r3, [r2, #4]
 80004e4:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80004e8:	6053      	str	r3, [r2, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80004ea:	6853      	ldr	r3, [r2, #4]
 80004ec:	4319      	orrs	r1, r3
 80004ee:	4308      	orrs	r0, r1
 80004f0:	6050      	str	r0, [r2, #4]
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <RCC_PLLCmd+0x8>)
 80004fa:	6018      	str	r0, [r3, #0]
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	42420060 	.word	0x42420060

08000504 <RCC_PREDIV1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8000504:	4a03      	ldr	r2, [pc, #12]	; (8000514 <RCC_PREDIV1Config+0x10>)
 8000506:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8000508:	f023 030f 	bic.w	r3, r3, #15

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 800050c:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 800050e:	62d0      	str	r0, [r2, #44]	; 0x2c
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000518:	4b01      	ldr	r3, [pc, #4]	; (8000520 <RCC_ClockSecuritySystemCmd+0x8>)
 800051a:	6018      	str	r0, [r3, #0]
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	4242004c 	.word	0x4242004c

08000524 <RCC_MCOConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));

  /* Get CFGR value */  
  tmpreg = RCC->CFGR;
 8000524:	4a03      	ldr	r2, [pc, #12]	; (8000534 <RCC_MCOConfig+0x10>)
 8000526:	6853      	ldr	r3, [r2, #4]
  /* Clear MCO[3:0] bits */
  tmpreg &= ~(RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 8000528:	f023 4307 	bic.w	r3, r3, #2264924160	; 0x87000000
  /* Set the RCC_MCOSource */
  tmpreg |= RCC_MCOSource<<24;
 800052c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000530:	6050      	str	r0, [r2, #4]
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <RCC_SYSCLKConfig+0x10>)
 800053a:	6853      	ldr	r3, [r2, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800053c:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000540:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000542:	6050      	str	r0, [r2, #4]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800054c:	4b02      	ldr	r3, [pc, #8]	; (8000558 <RCC_GetSYSCLKSource+0xc>)
 800054e:	6858      	ldr	r0, [r3, #4]
}
 8000550:	f000 000c 	and.w	r0, r0, #12
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <RCC_HCLKConfig+0x10>)
 800055e:	6853      	ldr	r3, [r2, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000564:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000566:	6050      	str	r0, [r2, #4]
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <RCC_PCLK1Config+0x10>)
 8000572:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000578:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800057a:	6050      	str	r0, [r2, #4]
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000584:	4a03      	ldr	r2, [pc, #12]	; (8000594 <RCC_PCLK2Config+0x10>)
 8000586:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000588:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800058c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000590:	6050      	str	r0, [r2, #4]
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <RCC_GetClocksFreq>:
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000598:	4ba3      	ldr	r3, [pc, #652]	; (8000828 <RCC_GetClocksFreq+0x290>)
 800059a:	685a      	ldr	r2, [r3, #4]
  
  switch (tmp)
 800059c:	f002 020c 	and.w	r2, r2, #12
 80005a0:	2a04      	cmp	r2, #4
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 80005a6:	f000 8159 	beq.w	800085c <RCC_GetClocksFreq+0x2c4>
 80005aa:	2a08      	cmp	r2, #8
 80005ac:	f000 8142 	beq.w	8000834 <RCC_GetClocksFreq+0x29c>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005b0:	499e      	ldr	r1, [pc, #632]	; (800082c <RCC_GetClocksFreq+0x294>)
 80005b2:	6001      	str	r1, [r0, #0]
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 80005b4:	b102      	cbz	r2, 80005b8 <RCC_GetClocksFreq+0x20>
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80005b6:	2200      	movs	r2, #0
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005b8:	4e9b      	ldr	r6, [pc, #620]	; (8000828 <RCC_GetClocksFreq+0x290>)
  tmp = tmp >> 4;
  ahbpresc = APBAHBPrescTable[tmp]; 
 80005ba:	4c9d      	ldr	r4, [pc, #628]	; (8000830 <RCC_GetClocksFreq+0x298>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005bc:	6873      	ldr	r3, [r6, #4]
  tmp = tmp >> 4;
 80005be:	f3c3 1303 	ubfx	r3, r3, #4, #4
  ahbpresc = APBAHBPrescTable[tmp]; 
 80005c2:	5ce7      	ldrb	r7, [r4, r3]
 80005c4:	b2ff      	uxtb	r7, r7
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80005c6:	fa21 f307 	lsr.w	r3, r1, r7
 80005ca:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005cc:	6875      	ldr	r5, [r6, #4]
  tmp = tmp >> 8;
 80005ce:	f3c5 2502 	ubfx	r5, r5, #8, #3
  presc = APBAHBPrescTable[tmp];
 80005d2:	5d65      	ldrb	r5, [r4, r5]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005d4:	fa23 f505 	lsr.w	r5, r3, r5
 80005d8:	6085      	str	r5, [r0, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005da:	f8d6 e004 	ldr.w	lr, [r6, #4]
  tmp = tmp >> 11;
 80005de:	f3ce 2ec2 	ubfx	lr, lr, #11, #3
  apb2presc = APBAHBPrescTable[tmp];
 80005e2:	f814 e00e 	ldrb.w	lr, [r4, lr]
 80005e6:	fa5f fe8e 	uxtb.w	lr, lr

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80005ea:	fa23 f30e 	lsr.w	r3, r3, lr
 80005ee:	60c3      	str	r3, [r0, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80005f0:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 80005f2:	0936      	lsrs	r6, r6, #4
  tmp = tmp >> 4;
  presc = ADCPrescTable[tmp & 0x0F];
 80005f4:	f006 0c0f 	and.w	ip, r6, #15
 80005f8:	eb04 0c4c 	add.w	ip, r4, ip, lsl #1
  if (((tmp & 0x10) != 0) && (presc != 0))
 80005fc:	06f6      	lsls	r6, r6, #27
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
  tmp = tmp >> 4;
  presc = ADCPrescTable[tmp & 0x0F];
 80005fe:	f8bc c010 	ldrh.w	ip, [ip, #16]
 8000602:	fa1f fc8c 	uxth.w	ip, ip
  if (((tmp & 0x10) != 0) && (presc != 0))
 8000606:	d503      	bpl.n	8000610 <RCC_GetClocksFreq+0x78>
 8000608:	f1bc 0f00 	cmp.w	ip, #0
 800060c:	f040 8104 	bne.w	8000818 <RCC_GetClocksFreq+0x280>
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000610:	6101      	str	r1, [r0, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000612:	4e85      	ldr	r6, [pc, #532]	; (8000828 <RCC_GetClocksFreq+0x290>)
 8000614:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 8000616:	0a76      	lsrs	r6, r6, #9
  tmp = tmp >> 9;
  presc = ADCPrescTable[tmp & 0x0F];
 8000618:	f006 0c0f 	and.w	ip, r6, #15
 800061c:	eb04 044c 	add.w	r4, r4, ip, lsl #1
  if (((tmp & 0x10) != 0) && (presc != 0))
 8000620:	06f6      	lsls	r6, r6, #27
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
  tmp = tmp >> 9;
  presc = ADCPrescTable[tmp & 0x0F];
 8000622:	8a24      	ldrh	r4, [r4, #16]
 8000624:	b2a4      	uxth	r4, r4
  if (((tmp & 0x10) != 0) && (presc != 0))
 8000626:	d502      	bpl.n	800062e <RCC_GetClocksFreq+0x96>
 8000628:	2c00      	cmp	r4, #0
 800062a:	f040 80f9 	bne.w	8000820 <RCC_GetClocksFreq+0x288>
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800062e:	6141      	str	r1, [r0, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000630:	4c7d      	ldr	r4, [pc, #500]	; (8000828 <RCC_GetClocksFreq+0x290>)
 8000632:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8000634:	06e4      	lsls	r4, r4, #27
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000636:	bf5c      	itt	pl
 8000638:	4c7c      	ldrpl	r4, [pc, #496]	; (800082c <RCC_GetClocksFreq+0x294>)
 800063a:	6184      	strpl	r4, [r0, #24]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800063c:	4c7a      	ldr	r4, [pc, #488]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800063e:	bf48      	it	mi
 8000640:	6181      	strmi	r1, [r0, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000642:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8000644:	06a6      	lsls	r6, r4, #26
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000646:	bf5c      	itt	pl
 8000648:	4c78      	ldrpl	r4, [pc, #480]	; (800082c <RCC_GetClocksFreq+0x294>)
 800064a:	61c4      	strpl	r4, [r0, #28]
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C3SW) != RCC_CFGR3_I2C3SW)
 800064c:	4c76      	ldr	r4, [pc, #472]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064e:	bf48      	it	mi
 8000650:	61c1      	strmi	r1, [r0, #28]
  }

  /* I2C3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C3SW) != RCC_CFGR3_I2C3SW)
 8000652:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8000654:	0664      	lsls	r4, r4, #25
  {
    /* I2C3 Clock is HSI Osc. */
    RCC_Clocks->I2C3CLK_Frequency = HSI_VALUE;
 8000656:	bf5c      	itt	pl
 8000658:	4c74      	ldrpl	r4, [pc, #464]	; (800082c <RCC_GetClocksFreq+0x294>)
 800065a:	6204      	strpl	r4, [r0, #32]
    /* I2C3 Clock is System Clock */
    RCC_Clocks->I2C3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
    
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800065c:	4c72      	ldr	r4, [pc, #456]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->I2C3CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C3 Clock is System Clock */
    RCC_Clocks->I2C3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065e:	bf48      	it	mi
 8000660:	6201      	strmi	r1, [r0, #32]
  }
    
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000662:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8000664:	05f6      	lsls	r6, r6, #23
 8000666:	d502      	bpl.n	800066e <RCC_GetClocksFreq+0xd6>
 8000668:	428a      	cmp	r2, r1
 800066a:	f000 8101 	beq.w	8000870 <RCC_GetClocksFreq+0x2d8>
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800066e:	4c6e      	ldr	r4, [pc, #440]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000670:	6243      	str	r3, [r0, #36]	; 0x24
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000672:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8000674:	04e6      	lsls	r6, r4, #19
 8000676:	d502      	bpl.n	800067e <RCC_GetClocksFreq+0xe6>
 8000678:	428a      	cmp	r2, r1
 800067a:	f000 8116 	beq.w	80008aa <RCC_GetClocksFreq+0x312>
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800067e:	4c6a      	ldr	r4, [pc, #424]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000680:	6283      	str	r3, [r0, #40]	; 0x28
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000682:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8000684:	05a6      	lsls	r6, r4, #22
 8000686:	d502      	bpl.n	800068e <RCC_GetClocksFreq+0xf6>
 8000688:	428a      	cmp	r2, r1
 800068a:	f000 8129 	beq.w	80008e0 <RCC_GetClocksFreq+0x348>
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800068e:	4c66      	ldr	r4, [pc, #408]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000690:	62c3      	str	r3, [r0, #44]	; 0x2c
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000692:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8000694:	0566      	lsls	r6, r4, #21
 8000696:	d502      	bpl.n	800069e <RCC_GetClocksFreq+0x106>
 8000698:	428a      	cmp	r2, r1
 800069a:	f000 8116 	beq.w	80008ca <RCC_GetClocksFreq+0x332>
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800069e:	4c62      	ldr	r4, [pc, #392]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->TIM15CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80006a0:	64c3      	str	r3, [r0, #76]	; 0x4c
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006a2:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80006a4:	0526      	lsls	r6, r4, #20
 80006a6:	d501      	bpl.n	80006ac <RCC_GetClocksFreq+0x114>
 80006a8:	428a      	cmp	r2, r1
 80006aa:	d04f      	beq.n	800074c <RCC_GetClocksFreq+0x1b4>
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006ac:	4c5e      	ldr	r4, [pc, #376]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->TIM16CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80006ae:	6503      	str	r3, [r0, #80]	; 0x50
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006b0:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80006b2:	04b6      	lsls	r6, r6, #18
 80006b4:	d553      	bpl.n	800075e <RCC_GetClocksFreq+0x1c6>
 80006b6:	428a      	cmp	r2, r1
 80006b8:	f000 811d 	beq.w	80008f6 <RCC_GetClocksFreq+0x35e>
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80006bc:	6503      	str	r3, [r0, #80]	; 0x50
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80006be:	6b22      	ldr	r2, [r4, #48]	; 0x30
    RCC_Clocks->TIM20CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM20 Clock is APB2 clock. */
    RCC_Clocks->TIM20CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80006c0:	6583      	str	r3, [r0, #88]	; 0x58
  }
    
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80006c2:	4a59      	ldr	r2, [pc, #356]	; (8000828 <RCC_GetClocksFreq+0x290>)
 80006c4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80006c6:	07a6      	lsls	r6, r4, #30
 80006c8:	d011      	beq.n	80006ee <RCC_GetClocksFreq+0x156>
#else
    /* USART Clock is PCLK2 */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
#endif  
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80006ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80006cc:	f003 0303 	and.w	r3, r3, #3
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	f000 80c7 	beq.w	8000864 <RCC_GetClocksFreq+0x2cc>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80006d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80006d8:	f003 0303 	and.w	r3, r3, #3
 80006dc:	2b02      	cmp	r3, #2
 80006de:	f000 8122 	beq.w	8000926 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80006e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80006e4:	f003 0303 	and.w	r3, r3, #3
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d101      	bne.n	80006f0 <RCC_GetClocksFreq+0x158>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80006ec:	4b4f      	ldr	r3, [pc, #316]	; (800082c <RCC_GetClocksFreq+0x294>)
 80006ee:	6383      	str	r3, [r0, #56]	; 0x38
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80006f0:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <RCC_GetClocksFreq+0x290>)
 80006f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f4:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80006f8:	d13c      	bne.n	8000774 <RCC_GetClocksFreq+0x1dc>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006fa:	63c5      	str	r5, [r0, #60]	; 0x3c
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80006fc:	4b4a      	ldr	r3, [pc, #296]	; (8000828 <RCC_GetClocksFreq+0x290>)
 80006fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000700:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 8000704:	d151      	bne.n	80007aa <RCC_GetClocksFreq+0x212>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000706:	6405      	str	r5, [r0, #64]	; 0x40
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000708:	4b47      	ldr	r3, [pc, #284]	; (8000828 <RCC_GetClocksFreq+0x290>)
 800070a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800070c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000710:	d165      	bne.n	80007de <RCC_GetClocksFreq+0x246>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000712:	6445      	str	r5, [r0, #68]	; 0x44
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <RCC_GetClocksFreq+0x290>)
 8000716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000718:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 800071c:	d079      	beq.n	8000812 <RCC_GetClocksFreq+0x27a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800071e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000720:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8000724:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8000728:	f000 80bc 	beq.w	80008a4 <RCC_GetClocksFreq+0x30c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800072c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800072e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8000732:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8000736:	f000 80fa 	beq.w	800092e <RCC_GetClocksFreq+0x396>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000740:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000744:	f000 80d3 	beq.w	80008ee <RCC_GetClocksFreq+0x356>
 8000748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
 800074c:	4577      	cmp	r7, lr
 800074e:	d1ad      	bne.n	80006ac <RCC_GetClocksFreq+0x114>
 8000750:	0056      	lsls	r6, r2, #1
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000752:	4c35      	ldr	r4, [pc, #212]	; (8000828 <RCC_GetClocksFreq+0x290>)
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
  {
    /* TIM16 Clock is 2 * pllclk */
    RCC_Clocks->TIM16CLK_Frequency = pllclk * 2;
 8000754:	6506      	str	r6, [r0, #80]	; 0x50
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000756:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8000758:	04a4      	lsls	r4, r4, #18
 800075a:	f100 80d0 	bmi.w	80008fe <RCC_GetClocksFreq+0x366>
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800075e:	4c32      	ldr	r4, [pc, #200]	; (8000828 <RCC_GetClocksFreq+0x290>)
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000760:	6503      	str	r3, [r0, #80]	; 0x50
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000762:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8000764:	0424      	lsls	r4, r4, #16
 8000766:	d5ab      	bpl.n	80006c0 <RCC_GetClocksFreq+0x128>
 8000768:	428a      	cmp	r2, r1
 800076a:	d1a9      	bne.n	80006c0 <RCC_GetClocksFreq+0x128>
  && (apb2presc == ahbpresc))
 800076c:	4577      	cmp	r7, lr
 800076e:	d1a7      	bne.n	80006c0 <RCC_GetClocksFreq+0x128>
 8000770:	004e      	lsls	r6, r1, #1
 8000772:	e0ca      	b.n	800090a <RCC_GetClocksFreq+0x372>
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000776:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800077a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800077e:	f000 808b 	beq.w	8000898 <RCC_GetClocksFreq+0x300>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000784:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000788:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800078c:	f000 80bf 	beq.w	800090e <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000796:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800079a:	bf04      	itt	eq
 800079c:	4b23      	ldreq	r3, [pc, #140]	; (800082c <RCC_GetClocksFreq+0x294>)
 800079e:	63c3      	streq	r3, [r0, #60]	; 0x3c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80007a0:	4b21      	ldr	r3, [pc, #132]	; (8000828 <RCC_GetClocksFreq+0x290>)
 80007a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a4:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 80007a8:	d0ad      	beq.n	8000706 <RCC_GetClocksFreq+0x16e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80007aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ac:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80007b0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80007b4:	d05a      	beq.n	800086c <RCC_GetClocksFreq+0x2d4>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80007b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b8:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80007bc:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80007c0:	f000 80ad 	beq.w	800091e <RCC_GetClocksFreq+0x386>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80007ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80007ce:	bf04      	itt	eq
 80007d0:	4b16      	ldreq	r3, [pc, #88]	; (800082c <RCC_GetClocksFreq+0x294>)
 80007d2:	6403      	streq	r3, [r0, #64]	; 0x40
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <RCC_GetClocksFreq+0x290>)
 80007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d8:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80007dc:	d099      	beq.n	8000712 <RCC_GetClocksFreq+0x17a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80007de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80007e4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80007e8:	d03e      	beq.n	8000868 <RCC_GetClocksFreq+0x2d0>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80007ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ec:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80007f0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80007f4:	f000 808f 	beq.w	8000916 <RCC_GetClocksFreq+0x37e>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80007fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000802:	bf04      	itt	eq
 8000804:	4b09      	ldreq	r3, [pc, #36]	; (800082c <RCC_GetClocksFreq+0x294>)
 8000806:	6443      	streq	r3, [r0, #68]	; 0x44
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <RCC_GetClocksFreq+0x290>)
 800080a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800080c:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 8000810:	d185      	bne.n	800071e <RCC_GetClocksFreq+0x186>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000812:	6485      	str	r5, [r0, #72]	; 0x48
 8000814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tmp = tmp >> 4;
  presc = ADCPrescTable[tmp & 0x0F];
  if (((tmp & 0x10) != 0) && (presc != 0))
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000818:	fbb2 f6fc 	udiv	r6, r2, ip
 800081c:	6106      	str	r6, [r0, #16]
 800081e:	e6f8      	b.n	8000612 <RCC_GetClocksFreq+0x7a>
  tmp = tmp >> 9;
  presc = ADCPrescTable[tmp & 0x0F];
  if (((tmp & 0x10) != 0) && (presc != 0))
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000820:	fbb2 f4f4 	udiv	r4, r2, r4
 8000824:	6144      	str	r4, [r0, #20]
 8000826:	e703      	b.n	8000630 <RCC_GetClocksFreq+0x98>
 8000828:	40021000 	.word	0x40021000
 800082c:	007a1200 	.word	0x007a1200
 8000830:	20000000 	.word	0x20000000
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000834:	685a      	ldr	r2, [r3, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000836:	685c      	ldr	r4, [r3, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000838:	f3c2 4283 	ubfx	r2, r2, #18, #4
      
      if (pllsource == 0x00)
 800083c:	03e7      	lsls	r7, r4, #15
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 800083e:	f102 0102 	add.w	r1, r2, #2
      
      if (pllsource == 0x00)
 8000842:	d52b      	bpl.n	800089c <RCC_GetClocksFreq+0x304>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000846:	4a3c      	ldr	r2, [pc, #240]	; (8000938 <RCC_GetClocksFreq+0x3a0>)
 8000848:	f003 030f 	and.w	r3, r3, #15
 800084c:	3301      	adds	r3, #1
 800084e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000852:	fb01 f202 	mul.w	r2, r1, r2
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000856:	6002      	str	r2, [r0, #0]
      break;
 8000858:	4611      	mov	r1, r2
 800085a:	e6ad      	b.n	80005b8 <RCC_GetClocksFreq+0x20>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800085c:	4936      	ldr	r1, [pc, #216]	; (8000938 <RCC_GetClocksFreq+0x3a0>)
 800085e:	6001      	str	r1, [r0, #0]
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000860:	2200      	movs	r2, #0
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
 8000862:	e6a9      	b.n	80005b8 <RCC_GetClocksFreq+0x20>
#endif  
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000864:	6381      	str	r1, [r0, #56]	; 0x38
 8000866:	e743      	b.n	80006f0 <RCC_GetClocksFreq+0x158>
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000868:	6441      	str	r1, [r0, #68]	; 0x44
 800086a:	e753      	b.n	8000714 <RCC_GetClocksFreq+0x17c>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800086c:	6401      	str	r1, [r0, #64]	; 0x40
 800086e:	e74b      	b.n	8000708 <RCC_GetClocksFreq+0x170>
    RCC_Clocks->I2C3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
    
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
 8000870:	4577      	cmp	r7, lr
 8000872:	f47f aefc 	bne.w	800066e <RCC_GetClocksFreq+0xd6>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000876:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800087a:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800087e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8000882:	f418 5f80 	tst.w	r8, #4096	; 0x1000
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000886:	4666      	mov	r6, ip
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000888:	d113      	bne.n	80008b2 <RCC_GetClocksFreq+0x31a>
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800088a:	6283      	str	r3, [r0, #40]	; 0x28
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800088c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800088e:	05a4      	lsls	r4, r4, #22
 8000890:	f57f aefd 	bpl.w	800068e <RCC_GetClocksFreq+0xf6>
 8000894:	4666      	mov	r6, ip
 8000896:	e012      	b.n	80008be <RCC_GetClocksFreq+0x326>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000898:	63c1      	str	r1, [r0, #60]	; 0x3c
 800089a:	e72f      	b.n	80006fc <RCC_GetClocksFreq+0x164>
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800089c:	4a27      	ldr	r2, [pc, #156]	; (800093c <RCC_GetClocksFreq+0x3a4>)
 800089e:	fb02 f201 	mul.w	r2, r2, r1
 80008a2:	e7d8      	b.n	8000856 <RCC_GetClocksFreq+0x2be>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008a4:	6481      	str	r1, [r0, #72]	; 0x48
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
 80008aa:	4577      	cmp	r7, lr
 80008ac:	f47f aee7 	bne.w	800067e <RCC_GetClocksFreq+0xe6>
 80008b0:	0056      	lsls	r6, r2, #1
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008b2:	4c23      	ldr	r4, [pc, #140]	; (8000940 <RCC_GetClocksFreq+0x3a8>)
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
  {
    /* HRTIM1 Clock is 2 * pllclk */
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
 80008b4:	6286      	str	r6, [r0, #40]	; 0x28
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008b6:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80008b8:	05a4      	lsls	r4, r4, #22
 80008ba:	f57f aee8 	bpl.w	800068e <RCC_GetClocksFreq+0xf6>
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008be:	4c20      	ldr	r4, [pc, #128]	; (8000940 <RCC_GetClocksFreq+0x3a8>)
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80008c0:	62c6      	str	r6, [r0, #44]	; 0x2c
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008c2:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80008c4:	0564      	lsls	r4, r4, #21
 80008c6:	d404      	bmi.n	80008d2 <RCC_GetClocksFreq+0x33a>
 80008c8:	e6e9      	b.n	800069e <RCC_GetClocksFreq+0x106>
  && (apb2presc == ahbpresc))
 80008ca:	4577      	cmp	r7, lr
 80008cc:	f47f aee7 	bne.w	800069e <RCC_GetClocksFreq+0x106>
 80008d0:	0056      	lsls	r6, r2, #1
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008d2:	4c1b      	ldr	r4, [pc, #108]	; (8000940 <RCC_GetClocksFreq+0x3a8>)
    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
  {
    /* TIM15 Clock is 2 * pllclk */
    RCC_Clocks->TIM15CLK_Frequency = pllclk * 2;
 80008d4:	64c6      	str	r6, [r0, #76]	; 0x4c
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008d6:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80008d8:	0524      	lsls	r4, r4, #20
 80008da:	f53f af3a 	bmi.w	8000752 <RCC_GetClocksFreq+0x1ba>
 80008de:	e6e5      	b.n	80006ac <RCC_GetClocksFreq+0x114>
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
 80008e0:	4577      	cmp	r7, lr
 80008e2:	f47f aed4 	bne.w	800068e <RCC_GetClocksFreq+0xf6>
 80008e6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80008ea:	4666      	mov	r6, ip
 80008ec:	e7e7      	b.n	80008be <RCC_GetClocksFreq+0x326>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <RCC_GetClocksFreq+0x3a0>)
 80008f0:	6483      	str	r3, [r0, #72]	; 0x48
  } 
}
 80008f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
 80008f6:	4577      	cmp	r7, lr
 80008f8:	f47f aee0 	bne.w	80006bc <RCC_GetClocksFreq+0x124>
 80008fc:	004e      	lsls	r6, r1, #1
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <RCC_GetClocksFreq+0x3a8>)
    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc))
  {
    /* TIM17 Clock is 2 * pllclk */
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
 8000900:	6546      	str	r6, [r0, #84]	; 0x54
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000902:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000904:	0417      	lsls	r7, r2, #16
 8000906:	f57f aedb 	bpl.w	80006c0 <RCC_GetClocksFreq+0x128>
  && (apb2presc == ahbpresc))
  {
    /* TIM20 Clock is 2 * pllclk */
    RCC_Clocks->TIM20CLK_Frequency = pllclk * 2;
 800090a:	6586      	str	r6, [r0, #88]	; 0x58
 800090c:	e6d9      	b.n	80006c2 <RCC_GetClocksFreq+0x12a>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800090e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000912:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000914:	e6f2      	b.n	80006fc <RCC_GetClocksFreq+0x164>
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800091a:	6443      	str	r3, [r0, #68]	; 0x44
 800091c:	e6fa      	b.n	8000714 <RCC_GetClocksFreq+0x17c>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800091e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000922:	6403      	str	r3, [r0, #64]	; 0x40
 8000924:	e6f0      	b.n	8000708 <RCC_GetClocksFreq+0x170>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800092a:	6383      	str	r3, [r0, #56]	; 0x38
 800092c:	e6e0      	b.n	80006f0 <RCC_GetClocksFreq+0x158>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800092e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000932:	6483      	str	r3, [r0, #72]	; 0x48
 8000934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000938:	007a1200 	.word	0x007a1200
 800093c:	003d0900 	.word	0x003d0900
 8000940:	40021000 	.word	0x40021000

08000944 <RCC_ADCCLKConfig>:
  tmp = (RCC_PLLCLK >> 28);
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <RCC_ADCCLKConfig+0x1c>)
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8000946:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8000948:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800094a:	bf14      	ite	ne
 800094c:	f423 5378 	bicne.w	r3, r3, #15872	; 0x3e00
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8000950:	f423 73f8 	biceq.w	r3, r3, #496	; 0x1f0
 8000954:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 8000956:	4a02      	ldr	r2, [pc, #8]	; (8000960 <RCC_ADCCLKConfig+0x1c>)
 8000958:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800095a:	4318      	orrs	r0, r3
 800095c:	62d0      	str	r0, [r2, #44]	; 0x2c
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000

08000964 <RCC_I2CCLKConfig>:
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
  
  /* Clear I2CSW bit */
    switch (tmp)
 8000964:	0f03      	lsrs	r3, r0, #28
 8000966:	2b01      	cmp	r3, #1
 8000968:	d012      	beq.n	8000990 <RCC_I2CCLKConfig+0x2c>
 800096a:	d30b      	bcc.n	8000984 <RCC_I2CCLKConfig+0x20>
 800096c:	2b02      	cmp	r3, #2
 800096e:	d104      	bne.n	800097a <RCC_I2CCLKConfig+0x16>
      break;
    case 0x01:
      RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
      break;
    case 0x02:
      RCC->CFGR3 &= ~RCC_CFGR3_I2C3SW;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <RCC_I2CCLKConfig+0x38>)
 8000972:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
    default:
      break;
  }
  
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <RCC_I2CCLKConfig+0x38>)
 800097c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800097e:	4318      	orrs	r0, r3
 8000980:	6310      	str	r0, [r2, #48]	; 0x30
 8000982:	4770      	bx	lr
  
  /* Clear I2CSW bit */
    switch (tmp)
  {
    case 0x00: 
      RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <RCC_I2CCLKConfig+0x38>)
 8000986:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000988:	f023 0310 	bic.w	r3, r3, #16
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 800098e:	e7f4      	b.n	800097a <RCC_I2CCLKConfig+0x16>
    case 0x01:
      RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 8000990:	4a02      	ldr	r2, [pc, #8]	; (800099c <RCC_I2CCLKConfig+0x38>)
 8000992:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000994:	f023 0320 	bic.w	r3, r3, #32
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 800099a:	e7ee      	b.n	800097a <RCC_I2CCLKConfig+0x16>
 800099c:	40021000 	.word	0x40021000

080009a0 <RCC_TIMCLKConfig>:

  tmp = (RCC_TIMCLK >> 28);
  
  /* Clear TIMSW bit */
  
  switch (tmp)
 80009a0:	0f03      	lsrs	r3, r0, #28
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	d80a      	bhi.n	80009bc <RCC_TIMCLKConfig+0x1c>
 80009a6:	e8df f003 	tbb	[pc, r3]
 80009aa:	241e      	.short	0x241e
 80009ac:	0e30042a 	.word	0x0e30042a
 80009b0:	1813      	.short	0x1813
      break;
    case 0x02:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM15SW;
      break;
    case 0x03:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM16SW;
 80009b2:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 80009b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80009b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
    default:
      break;
  }
  
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 80009be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80009c0:	4318      	orrs	r0, r3
 80009c2:	6310      	str	r0, [r2, #48]	; 0x30
 80009c4:	4770      	bx	lr
      break;
    case 0x04:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM17SW;
      break;
    case 0x05:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM20SW;
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 80009c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80009ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
    case 0x06:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM2SW;
 80009d0:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 80009d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80009d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
    case 0x07:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM3SW;
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 80009dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80009de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80009e4:	e7ea      	b.n	80009bc <RCC_TIMCLKConfig+0x1c>
  /* Clear TIMSW bit */
  
  switch (tmp)
  {
    case 0x00: 
      RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 80009e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80009ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009ee:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80009f0:	e7e4      	b.n	80009bc <RCC_TIMCLKConfig+0x1c>
    case 0x01:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 80009f2:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 80009f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80009f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80009fc:	e7de      	b.n	80009bc <RCC_TIMCLKConfig+0x1c>
    case 0x02:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM15SW;
 80009fe:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 8000a00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000a08:	e7d8      	b.n	80009bc <RCC_TIMCLKConfig+0x1c>
    case 0x03:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM16SW;
      break;
    case 0x04:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM17SW;
 8000a0a:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <RCC_TIMCLKConfig+0x78>)
 8000a0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000a14:	e7d2      	b.n	80009bc <RCC_TIMCLKConfig+0x1c>
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <RCC_HRTIM1CLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_HRTIMCLK(RCC_HRTIMCLK));
  
  /* Clear HRTIMSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_HRTIM1SW;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <RCC_HRTIM1CLKConfig+0x14>)
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set HRTIMSW bits according to RCC_HRTIMCLK value */
  RCC->CFGR3 |= RCC_HRTIMCLK;
 8000a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a28:	4310      	orrs	r0, r2
 8000a2a:	6318      	str	r0, [r3, #48]	; 0x30
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <RCC_USARTCLKConfig>:
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 8000a34:	0f03      	lsrs	r3, r0, #28
 8000a36:	3b01      	subs	r3, #1
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	d809      	bhi.n	8000a50 <RCC_USARTCLKConfig+0x1c>
 8000a3c:	e8df f003 	tbb	[pc, r3]
 8000a40:	1f031913 	.word	0x1f031913
 8000a44:	0d          	.byte	0x0d
 8000a45:	00          	.byte	0x00
      break;
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
      break;
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <RCC_USARTCLKConfig+0x58>)
 8000a48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a4a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000a4e:	6313      	str	r3, [r2, #48]	; 0x30
    default:
      break;
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <RCC_USARTCLKConfig+0x58>)
 8000a52:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a54:	4318      	orrs	r0, r3
 8000a56:	6310      	str	r0, [r2, #48]	; 0x30
 8000a58:	4770      	bx	lr
      break;
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
      break;
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <RCC_USARTCLKConfig+0x58>)
 8000a5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a5e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000a64:	e7f4      	b.n	8000a50 <RCC_USARTCLKConfig+0x1c>

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <RCC_USARTCLKConfig+0x58>)
 8000a68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a6a:	f023 0303 	bic.w	r3, r3, #3
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000a70:	e7ee      	b.n	8000a50 <RCC_USARTCLKConfig+0x1c>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8000a72:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <RCC_USARTCLKConfig+0x58>)
 8000a74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000a7a:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000a7c:	e7e8      	b.n	8000a50 <RCC_USARTCLKConfig+0x1c>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
      break;
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 8000a7e:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <RCC_USARTCLKConfig+0x58>)
 8000a80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a82:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000a88:	e7e2      	b.n	8000a50 <RCC_USARTCLKConfig+0x1c>
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000a90:	4b01      	ldr	r3, [pc, #4]	; (8000a98 <RCC_USBCLKConfig+0x8>)
 8000a92:	6018      	str	r0, [r3, #0]
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	424200d8 	.word	0x424200d8

08000a9c <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000a9c:	4a02      	ldr	r2, [pc, #8]	; (8000aa8 <RCC_RTCCLKConfig+0xc>)
 8000a9e:	6a13      	ldr	r3, [r2, #32]
 8000aa0:	4318      	orrs	r0, r3
 8000aa2:	6210      	str	r0, [r2, #32]
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <RCC_I2SCLKConfig+0x8>)
 8000aae:	6018      	str	r0, [r3, #0]
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	424200dc 	.word	0x424200dc

08000ab8 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000ab8:	4b01      	ldr	r3, [pc, #4]	; (8000ac0 <RCC_RTCCLKCmd+0x8>)
 8000aba:	6018      	str	r0, [r3, #0]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	4242043c 	.word	0x4242043c

08000ac4 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000ac4:	4b01      	ldr	r3, [pc, #4]	; (8000acc <RCC_BackupResetCmd+0x8>)
 8000ac6:	6018      	str	r0, [r3, #0]
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	42420440 	.word	0x42420440

08000ad0 <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ad0:	b929      	cbnz	r1, 8000ade <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <RCC_AHBPeriphClockCmd+0x18>)
 8000ad4:	6953      	ldr	r3, [r2, #20]
 8000ad6:	ea23 0000 	bic.w	r0, r3, r0
 8000ada:	6150      	str	r0, [r2, #20]
 8000adc:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000ade:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <RCC_AHBPeriphClockCmd+0x18>)
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4310      	orrs	r0, r2
 8000ae4:	6158      	str	r0, [r3, #20]
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000

08000aec <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000aec:	b929      	cbnz	r1, 8000afa <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <RCC_APB2PeriphClockCmd+0x18>)
 8000af0:	6993      	ldr	r3, [r2, #24]
 8000af2:	ea23 0000 	bic.w	r0, r3, r0
 8000af6:	6190      	str	r0, [r2, #24]
 8000af8:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000afa:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <RCC_APB2PeriphClockCmd+0x18>)
 8000afc:	699a      	ldr	r2, [r3, #24]
 8000afe:	4310      	orrs	r0, r2
 8000b00:	6198      	str	r0, [r3, #24]
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000

08000b08 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b08:	b929      	cbnz	r1, 8000b16 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <RCC_APB1PeriphClockCmd+0x18>)
 8000b0c:	69d3      	ldr	r3, [r2, #28]
 8000b0e:	ea23 0000 	bic.w	r0, r3, r0
 8000b12:	61d0      	str	r0, [r2, #28]
 8000b14:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b16:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <RCC_APB1PeriphClockCmd+0x18>)
 8000b18:	69da      	ldr	r2, [r3, #28]
 8000b1a:	4310      	orrs	r0, r2
 8000b1c:	61d8      	str	r0, [r3, #28]
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000

08000b24 <RCC_AHBPeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b24:	b929      	cbnz	r1, 8000b32 <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <RCC_AHBPeriphResetCmd+0x18>)
 8000b28:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000b2a:	ea23 0000 	bic.w	r0, r3, r0
 8000b2e:	6290      	str	r0, [r2, #40]	; 0x28
 8000b30:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <RCC_AHBPeriphResetCmd+0x18>)
 8000b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b36:	4310      	orrs	r0, r2
 8000b38:	6298      	str	r0, [r3, #40]	; 0x28
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000

08000b40 <RCC_APB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b40:	b929      	cbnz	r1, 8000b4e <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <RCC_APB2PeriphResetCmd+0x18>)
 8000b44:	68d3      	ldr	r3, [r2, #12]
 8000b46:	ea23 0000 	bic.w	r0, r3, r0
 8000b4a:	60d0      	str	r0, [r2, #12]
 8000b4c:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b4e:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <RCC_APB2PeriphResetCmd+0x18>)
 8000b50:	68da      	ldr	r2, [r3, #12]
 8000b52:	4310      	orrs	r0, r2
 8000b54:	60d8      	str	r0, [r3, #12]
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000

08000b5c <RCC_APB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b5c:	b929      	cbnz	r1, 8000b6a <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <RCC_APB1PeriphResetCmd+0x18>)
 8000b60:	6913      	ldr	r3, [r2, #16]
 8000b62:	ea23 0000 	bic.w	r0, r3, r0
 8000b66:	6110      	str	r0, [r2, #16]
 8000b68:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b6a:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <RCC_APB1PeriphResetCmd+0x18>)
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	4310      	orrs	r0, r2
 8000b70:	6118      	str	r0, [r3, #16]
 8000b72:	4770      	bx	lr
 8000b74:	40021000 	.word	0x40021000

08000b78 <RCC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b78:	b929      	cbnz	r1, 8000b86 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <RCC_ITConfig+0x18>)
 8000b7c:	7813      	ldrb	r3, [r2, #0]
 8000b7e:	ea23 0000 	bic.w	r0, r3, r0
 8000b82:	7010      	strb	r0, [r2, #0]
 8000b84:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000b86:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <RCC_ITConfig+0x18>)
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	4310      	orrs	r0, r2
 8000b8c:	7018      	strb	r0, [r3, #0]
 8000b8e:	4770      	bx	lr
 8000b90:	40021009 	.word	0x40021009

08000b94 <RCC_GetFlagStatus>:
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
 8000b94:	0943      	lsrs	r3, r0, #5
 8000b96:	d108      	bne.n	8000baa <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->CR;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <RCC_GetFlagStatus+0x44>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000b9c:	f000 001f 	and.w	r0, r0, #31
 8000ba0:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000ba4:	f000 0001 	and.w	r0, r0, #1
 8000ba8:	4770      	bx	lr

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d00b      	beq.n	8000bc6 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 8000bae:	2b04      	cmp	r3, #4
  {
    statusreg = RCC->CFGR;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <RCC_GetFlagStatus+0x44>)
 8000bb2:	bf0c      	ite	eq
 8000bb4:	685b      	ldreq	r3, [r3, #4]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000bb6:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000bb8:	f000 001f 	and.w	r0, r0, #31
 8000bbc:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000bc0:	f000 0001 	and.w	r0, r0, #1
 8000bc4:	4770      	bx	lr
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <RCC_GetFlagStatus+0x44>)
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000bca:	f000 001f 	and.w	r0, r0, #31
 8000bce:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000bd2:	f000 0001 	and.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000

08000bdc <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000bdc:	4a02      	ldr	r2, [pc, #8]	; (8000be8 <RCC_ClearFlag+0xc>)
 8000bde:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000be4:	6253      	str	r3, [r2, #36]	; 0x24
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000

08000bec <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <RCC_GetITStatus+0x10>)
 8000bee:	689b      	ldr	r3, [r3, #8]
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000bf0:	4218      	tst	r0, r3
}
 8000bf2:	bf14      	ite	ne
 8000bf4:	2001      	movne	r0, #1
 8000bf6:	2000      	moveq	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000c00:	4b01      	ldr	r3, [pc, #4]	; (8000c08 <RCC_ClearITPendingBit+0x8>)
 8000c02:	7018      	strb	r0, [r3, #0]
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	4002100a 	.word	0x4002100a

08000c0c <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in 10 ms.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{
 8000c0c:	b082      	sub	sp, #8
  TimingDelay = nTime;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <Delay+0x14>)
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in 10 ms.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{
 8000c10:	9001      	str	r0, [sp, #4]
  TimingDelay = nTime;
 8000c12:	9a01      	ldr	r2, [sp, #4]
 8000c14:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d1fc      	bne.n	8000c16 <Delay+0xa>
}
 8000c1c:	b002      	add	sp, #8
 8000c1e:	4770      	bx	lr
 8000c20:	20000060 	.word	0x20000060

08000c24 <main>:
  * @brief  Main program.
  * @param  None 
  * @retval None
  */
int main(void)
{  
 8000c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* SysTick end of count event each 10ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 8000c28:	4c2f      	ldr	r4, [pc, #188]	; (8000ce8 <main+0xc4>)
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f7ff fcb4 	bl	8000598 <RCC_GetClocksFreq>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000c30:	6863      	ldr	r3, [r4, #4]
 8000c32:	2264      	movs	r2, #100	; 0x64
 8000c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3e:	d209      	bcs.n	8000c54 <main+0x30>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <main+0xc8>)
 8000c42:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <main+0xcc>)
 8000c46:	21f0      	movs	r1, #240	; 0xf0
 8000c48:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c50:	2307      	movs	r3, #7
 8000c52:	6013      	str	r3, [r2, #0]
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
   
  /* Initialize LEDs and User Button available on STM32F3-Discovery board */
  STM_EVAL_LEDInit(LED3);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 f867 	bl	8000d28 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 f864 	bl	8000d28 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 8000c60:	2002      	movs	r0, #2
 8000c62:	f000 f861 	bl	8000d28 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 8000c66:	2003      	movs	r0, #3
 8000c68:	f000 f85e 	bl	8000d28 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED7);
 8000c6c:	2004      	movs	r0, #4
 8000c6e:	f000 f85b 	bl	8000d28 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED8);
 8000c72:	2005      	movs	r0, #5
 8000c74:	f000 f858 	bl	8000d28 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED9);
 8000c78:	2006      	movs	r0, #6
 8000c7a:	f000 f855 	bl	8000d28 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED10);
 8000c7e:	2007      	movs	r0, #7
  {   

    int i = 0;
    int length = sizeof(light_wheel)/sizeof(uint16_t);
    for(i = 0; i < length; i++){
        STM_EVAL_LEDOn(light_wheel[i]);
 8000c80:	4d1c      	ldr	r5, [pc, #112]	; (8000cf4 <main+0xd0>)
  STM_EVAL_LEDInit(LED5);
  STM_EVAL_LEDInit(LED6);
  STM_EVAL_LEDInit(LED7);
  STM_EVAL_LEDInit(LED8);
  STM_EVAL_LEDInit(LED9);
  STM_EVAL_LEDInit(LED10);
 8000c82:	f000 f851 	bl	8000d28 <STM_EVAL_LEDInit>
  {   

    int i = 0;
    int length = sizeof(light_wheel)/sizeof(uint16_t);
    for(i = 0; i < length; i++){
        STM_EVAL_LEDOn(light_wheel[i]);
 8000c86:	462e      	mov	r6, r5
  while (1)
  {   

    int i = 0;
    int length = sizeof(light_wheel)/sizeof(uint16_t);
    for(i = 0; i < length; i++){
 8000c88:	2400      	movs	r4, #0
        STM_EVAL_LEDOn(light_wheel[i]);
 8000c8a:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
 8000c8e:	f000 f871 	bl	8000d74 <STM_EVAL_LEDOn>
        Delay(20);
 8000c92:	2014      	movs	r0, #20
 8000c94:	f7ff ffba 	bl	8000c0c <Delay>
        STM_EVAL_LEDOff(light_wheel[i]);
 8000c98:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
  while (1)
  {   

    int i = 0;
    int length = sizeof(light_wheel)/sizeof(uint16_t);
    for(i = 0; i < length; i++){
 8000c9c:	3401      	adds	r4, #1
        STM_EVAL_LEDOn(light_wheel[i]);
        Delay(20);
        STM_EVAL_LEDOff(light_wheel[i]);
 8000c9e:	f000 f875 	bl	8000d8c <STM_EVAL_LEDOff>
  while (1)
  {   

    int i = 0;
    int length = sizeof(light_wheel)/sizeof(uint16_t);
    for(i = 0; i < length; i++){
 8000ca2:	2c08      	cmp	r4, #8
 8000ca4:	d1f1      	bne.n	8000c8a <main+0x66>
        STM_EVAL_LEDOn(light_wheel[i]);
        Delay(20);
        STM_EVAL_LEDOff(light_wheel[i]);
    }

    STM_EVAL_LEDOn(light_wheel[0]);
 8000ca6:	7830      	ldrb	r0, [r6, #0]
 8000ca8:	4c13      	ldr	r4, [pc, #76]	; (8000cf8 <main+0xd4>)
 8000caa:	f000 f863 	bl	8000d74 <STM_EVAL_LEDOn>
    Delay(50);
 8000cae:	2032      	movs	r0, #50	; 0x32
 8000cb0:	f7ff ffac 	bl	8000c0c <Delay>
    STM_EVAL_LEDOff(light_wheel[0]);
 8000cb4:	7830      	ldrb	r0, [r6, #0]
 8000cb6:	f000 f869 	bl	8000d8c <STM_EVAL_LEDOff>
 8000cba:	f1a4 0710 	sub.w	r7, r4, #16
 8000cbe:	46a0      	mov	r8, r4

    for(i = length - 1; i >= 0 ; i--){
        STM_EVAL_LEDOn(light_wheel[i]);
 8000cc0:	f834 0902 	ldrh.w	r0, [r4], #-2
 8000cc4:	b2c0      	uxtb	r0, r0
 8000cc6:	f000 f855 	bl	8000d74 <STM_EVAL_LEDOn>
        Delay(20);
 8000cca:	2014      	movs	r0, #20
 8000ccc:	f7ff ff9e 	bl	8000c0c <Delay>
        STM_EVAL_LEDOff(light_wheel[i]);
 8000cd0:	f898 0000 	ldrb.w	r0, [r8]
 8000cd4:	f000 f85a 	bl	8000d8c <STM_EVAL_LEDOff>

    STM_EVAL_LEDOn(light_wheel[0]);
    Delay(50);
    STM_EVAL_LEDOff(light_wheel[0]);

    for(i = length - 1; i >= 0 ; i--){
 8000cd8:	42bc      	cmp	r4, r7
 8000cda:	d1f0      	bne.n	8000cbe <main+0x9a>
        STM_EVAL_LEDOn(light_wheel[i]);
        Delay(20);
        STM_EVAL_LEDOff(light_wheel[i]);
    }

    counter++;
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <main+0xd8>)
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	6013      	str	r3, [r2, #0]
  }
 8000ce4:	e7d0      	b.n	8000c88 <main+0x64>
 8000ce6:	bf00      	nop
 8000ce8:	20000068 	.word	0x20000068
 8000cec:	e000e010 	.word	0xe000e010
 8000cf0:	e000ed00 	.word	0xe000ed00
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	2000003e 	.word	0x2000003e
 8000cfc:	20000064 	.word	0x20000064

08000d00 <TimingDelay_Decrement>:
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <TimingDelay_Decrement+0x10>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	b112      	cbz	r2, 8000d0c <TimingDelay_Decrement+0xc>
  { 
    TimingDelay--;
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000060 	.word	0x20000060

08000d14 <NMI_Handler>:
 8000d14:	4770      	bx	lr

08000d16 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler>

08000d18 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler>

08000d1a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler>

08000d1c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler>

08000d1e <SVC_Handler>:
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
	TimingDelay_Decrement();
 8000d24:	f7ff bfec 	b.w	8000d00 <TimingDelay_Decrement>

08000d28 <STM_EVAL_LEDInit>:
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <STM_EVAL_LEDInit+0x40>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000d2a:	b513      	push	{r0, r1, r4, lr}
 8000d2c:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000d2e:	2101      	movs	r1, #1
 8000d30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000d34:	f7ff fecc 	bl	8000ad0 <RCC_AHBPeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <STM_EVAL_LEDInit+0x44>)
 8000d3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8000d3e:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000d46:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <STM_EVAL_LEDInit+0x48>)
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d52:	2200      	movs	r2, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000d54:	4669      	mov	r1, sp
 8000d56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d5a:	f88d 2006 	strb.w	r2, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000d5e:	f7ff fa9b 	bl	8000298 <GPIO_Init>
}
 8000d62:	b002      	add	sp, #8
 8000d64:	bd10      	pop	{r4, pc}
 8000d66:	bf00      	nop
 8000d68:	08000f3c 	.word	0x08000f3c
 8000d6c:	08000f5c 	.word	0x08000f5c
 8000d70:	20000040 	.word	0x20000040

08000d74 <STM_EVAL_LEDOn>:
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <STM_EVAL_LEDOn+0x10>)
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <STM_EVAL_LEDOn+0x14>)
 8000d78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d7c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8000d80:	619a      	str	r2, [r3, #24]
 8000d82:	4770      	bx	lr
 8000d84:	20000040 	.word	0x20000040
 8000d88:	08000f5c 	.word	0x08000f5c

08000d8c <STM_EVAL_LEDOff>:
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BRR = GPIO_PIN[Led];  
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <STM_EVAL_LEDOff+0x10>)
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <STM_EVAL_LEDOff+0x14>)
 8000d90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d94:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8000d98:	851a      	strh	r2, [r3, #40]	; 0x28
 8000d9a:	4770      	bx	lr
 8000d9c:	20000040 	.word	0x20000040
 8000da0:	08000f5c 	.word	0x08000f5c

08000da4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4a39      	ldr	r2, [pc, #228]	; (8000e8c <SystemInit+0xe8>)
 8000da6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000daa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <SystemInit+0xec>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	f042 0201 	orr.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000dbc:	6859      	ldr	r1, [r3, #4]
 8000dbe:	4a35      	ldr	r2, [pc, #212]	; (8000e94 <SystemInit+0xf0>)
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000dca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000dde:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de2:	f022 020f 	bic.w	r2, r2, #15
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000de8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dea:	4a2b      	ldr	r2, [pc, #172]	; (8000e98 <SystemInit+0xf4>)
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b082      	sub	sp, #8

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000dee:	400a      	ands	r2, r1
 8000df0:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000df6:	9200      	str	r2, [sp, #0]
 8000df8:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e00:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000e08:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8000e0a:	9a00      	ldr	r2, [sp, #0]
 8000e0c:	3201      	adds	r2, #1
 8000e0e:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e10:	9a01      	ldr	r2, [sp, #4]
 8000e12:	b91a      	cbnz	r2, 8000e1c <SystemInit+0x78>
 8000e14:	9a00      	ldr	r2, [sp, #0]
 8000e16:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000e1a:	d1f2      	bne.n	8000e02 <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000e22:	bf18      	it	ne
 8000e24:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e26:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000e28:	9a01      	ldr	r2, [sp, #4]
 8000e2a:	2a01      	cmp	r2, #1
 8000e2c:	d005      	beq.n	8000e3a <SystemInit+0x96>
  SetSysClock();
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <SystemInit+0xe8>)
 8000e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e34:	609a      	str	r2, [r3, #8]
#endif  
}
 8000e36:	b002      	add	sp, #8
 8000e38:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <SystemInit+0xf8>)
 8000e3c:	2112      	movs	r1, #18
 8000e3e:	6011      	str	r1, [r2, #0]
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e4e:	605a      	str	r2, [r3, #4]
    
   
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000e56:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000e5e:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e66:	601a      	str	r2, [r3, #0]
    
    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <SystemInit+0xec>)
 8000e6c:	0189      	lsls	r1, r1, #6
 8000e6e:	d5fb      	bpl.n	8000e68 <SystemInit+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e70:	6851      	ldr	r1, [r2, #4]
 8000e72:	f021 0103 	bic.w	r1, r1, #3
 8000e76:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000e78:	6851      	ldr	r1, [r2, #4]
 8000e7a:	f041 0102 	orr.w	r1, r1, #2
 8000e7e:	6051      	str	r1, [r2, #4]
    
    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	f002 020c 	and.w	r2, r2, #12
 8000e86:	2a08      	cmp	r2, #8
 8000e88:	d1fa      	bne.n	8000e80 <SystemInit+0xdc>
 8000e8a:	e7d0      	b.n	8000e2e <SystemInit+0x8a>
 8000e8c:	e000ed00 	.word	0xe000ed00
 8000e90:	40021000 	.word	0x40021000
 8000e94:	f87fc00c 	.word	0xf87fc00c
 8000e98:	ff00fccc 	.word	0xff00fccc
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ea0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ea2:	e003      	b.n	8000eac <LoopCopyDataInit>

08000ea4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8000ea6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ea8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eaa:	3104      	adds	r1, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <LoopForever+0x6>)
	ldr	r3, =_edata
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <LoopForever+0xa>)
	adds	r2, r0, r1
 8000eb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000eb4:	d3f6      	bcc.n	8000ea4 <CopyDataInit>
	ldr	r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopForever+0xe>)
	b	LoopFillZerobss
 8000eb8:	e002      	b.n	8000ec0 <LoopFillZerobss>

08000eba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ebc:	f842 3b04 	str.w	r3, [r2], #4

08000ec0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <LoopForever+0x12>)
	cmp	r2, r3
 8000ec2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ec4:	d3f9      	bcc.n	8000eba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ec6:	f7ff ff6d 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f000 f80f 	bl	8000eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ece:	f7ff fea9 	bl	8000c24 <main>

08000ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000ed4:	08000f84 	.word	0x08000f84
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000edc:	20000060 	.word	0x20000060
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000ee0:	20000060 	.word	0x20000060
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ee4:	200000c4 	.word	0x200000c4

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <__libc_init_array>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	4e0f      	ldr	r6, [pc, #60]	; (8000f2c <__libc_init_array+0x40>)
 8000ef0:	4d0f      	ldr	r5, [pc, #60]	; (8000f30 <__libc_init_array+0x44>)
 8000ef2:	1b76      	subs	r6, r6, r5
 8000ef4:	10b6      	asrs	r6, r6, #2
 8000ef6:	bf18      	it	ne
 8000ef8:	2400      	movne	r4, #0
 8000efa:	d005      	beq.n	8000f08 <__libc_init_array+0x1c>
 8000efc:	3401      	adds	r4, #1
 8000efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f02:	4798      	blx	r3
 8000f04:	42a6      	cmp	r6, r4
 8000f06:	d1f9      	bne.n	8000efc <__libc_init_array+0x10>
 8000f08:	4e0a      	ldr	r6, [pc, #40]	; (8000f34 <__libc_init_array+0x48>)
 8000f0a:	4d0b      	ldr	r5, [pc, #44]	; (8000f38 <__libc_init_array+0x4c>)
 8000f0c:	1b76      	subs	r6, r6, r5
 8000f0e:	f000 f82d 	bl	8000f6c <_init>
 8000f12:	10b6      	asrs	r6, r6, #2
 8000f14:	bf18      	it	ne
 8000f16:	2400      	movne	r4, #0
 8000f18:	d006      	beq.n	8000f28 <__libc_init_array+0x3c>
 8000f1a:	3401      	adds	r4, #1
 8000f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f20:	4798      	blx	r3
 8000f22:	42a6      	cmp	r6, r4
 8000f24:	d1f9      	bne.n	8000f1a <__libc_init_array+0x2e>
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	bd70      	pop	{r4, r5, r6, pc}
 8000f2a:	bf00      	nop
	...

08000f3c <GPIO_CLK>:
 8000f3c:	0000 0020 0000 0020 0000 0020 0000 0020     .. ... ... ... .
 8000f4c:	0000 0020 0000 0020 0000 0020 0000 0020     .. ... ... ... .

08000f5c <GPIO_PIN>:
 8000f5c:	0200 0100 0400 8000 0800 4000 1000 2000     ...........@... 

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr
